Index: BMS/views.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.shortcuts import render, redirect\nfrom django.http import HttpResponseRedirect\nfrom django.contrib.auth.forms import UserCreationForm\nfrom .forms import *\nfrom .models import readers, bms_admin, booklist, books, borrow\nfrom hashlib import sha1\nfrom django.contrib import messages\nfrom django.contrib.auth import authenticate, login, logout\nfrom django.contrib.auth.decorators import login_required\nfrom django.db.models import Count\nfrom django.core.paginator import Paginator\nimport datetime, timedelta, time\nfrom apscheduler.schedulers.background import BackgroundScheduler\nfrom django_apscheduler.jobstores import DjangoJobStore, register_events, register_job\n\nscheduler = BackgroundScheduler()\nscheduler.add_jobstore(DjangoJobStore(), 'default')\n\n@register_job(scheduler, 'interval', seconds=1)\ndef test_job():\n    time.sleep(4)\n    print(\"I'm a test a job!\")\n\nregister_events(scheduler)\n\n# scheduler.start()\n# print('Scheduler started!')\n\n\n\n\n@login_required(login_url='login')\ndef mainPage(request):\n    return render(request, 'BMS/mainpage.html')\n\n\ndef registerPage(request):\n    form = CreateUserForm()\n\n    if request.method == 'POST':\n        form = CreateUserForm(request.POST)\n        if form.is_valid():\n            print('**')\n            print(form.data)\n            print(form.data['readerId'])\n            form.save()\n        else:\n            print('error')\n\n    context = {'form': form}\n    return render(request, 'BMS/register.html', context)\n\n\ndef registerAdmin(request):\n    if request.method == 'POST':\n        form = CreateAdminForm(request.POST)\n        if form.is_valid():\n            gh = form.cleaned_data['gh']\n            xm = form.cleaned_data['xm']\n            pwd = form.cleaned_data['password1']\n            cpwd = form.cleaned_data['password2']\n            # 加密\n            sh1 = sha1()\n            sh1.update(pwd.encode('utf-8'))\n            pwdd = sh1.hexdigest()\n            if pwd != cpwd:\n                return redirect('/')\n            bms_admin.objects.get_or_create(gh=gh, username=xm, password=pwdd)\n            msg = 'Admin register success'\n            return render(request, 'BMS/registerAdmin.html')\n    else:\n        form = CreateAdminForm()\n        context = {'form': form}\n        return render(request, 'BMS/registerAdmin.html', context)\n\n\ndef loginPage(request):\n    if request.method == 'POST':\n        form = loginForm(request.POST)\n        gh_data = form.data['gh']\n        password_data = form.data['password']\n        user = bms_admin.objects.filter(gh=gh_data).first()\n        if user:\n            sh1 = sha1()\n            sh1.update(password_data.encode('utf-8'))\n            pwd = sh1.hexdigest()\n            print(user)\n            if user.password == pwd:\n                login(request, user)\n                messages.success(request, \"成功登录\")\n                return redirect('mainPage')\n            else:\n                messages.error(request, \"登录失败\")\n                return redirect('login')\n        else:\n            messages.error(request, '登录失败')\n    form = loginForm()\n    context = {'form': form}\n    return render(request, 'BMS/Login.html', context)\n\n\ndef logoutUser(request):\n    logout(request)\n    return redirect('login')\n\n\ndef addBooks(request):\n    form = addBooksForm()\n    if request.method == 'POST':\n        print('form=', request.POST)\n        form = addBooksForm(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"成功录入\")\n            return redirect('addBooks')\n        else:\n            print('error=', form.errors)\n            messages.error(request, \"录入失败，重新输入\")\n            return redirect('addBooks')\n\n    context = {'form': form}\n    return render(request, 'BMS/addBooks.html', context)\n\n\ndef buildBooks(request):\n    form = buildbookForm()\n    if request.method == 'POST':\n        print('form=', request.POST)\n        form = buildbookForm(request.POST)\n        if form.is_valid():\n            form.save()\n            # messages.success(request, \"成功录入\")\n        else:\n            print('error=', form.errors)\n            # messages.warning(request, \"录入失败\")\n    context = {'form': form}\n    return render(request, 'BMS/buildbook.html', context)\n\n@login_required(login_url='login')\ndef querybookinfo(request):\n    books = None\n    count_borrow = None\n    count_borrow2 = None\n    if request.method == 'POST':\n        sec = request.POST.get('serc')\n        condition = request.POST.get('condition')\n        if sec == 'all':\n            books = booklist.objects.filter(bookName=condition)\n            count_borrow = {}\n            count_borrow2 = {}\n            for book in books:\n                count_temp = book.books_set.filter(status='已借出').aggregate(Count('ID'))\n                count_temp2 = book.books_set.filter(status='不外借').aggregate(Count('ID'))\n                print(count_temp)\n                if book.ISBN not in count_borrow:\n                    count_borrow[book.ISBN] = count_temp['ID__count']\n                if book.ISBN not in count_borrow2:\n                    count_borrow2[book.ISBN] = count_temp2['ID__count']\n            context = {'books': books, 'count_borrow': count_borrow}\n            return render(request, 'BMS/queryBookInfo.html', context, )\n        else:\n            books = booklist.objects.filter(ISBN=condition)\n            count_borrow = {}\n            count_borrow2 = {}\n            for book in books:\n                count_temp = book.books_set.filter(status='已借出').aggregate(Count('ID'))\n                count_temp2 = book.books_set.filter(status='不外借').aggregate(Count('ID'))\n                print(count_temp)\n                if book.ISBN not in count_borrow:\n                    count_borrow[book.ISBN] = count_temp['ID__count']\n                if book.ISBN not in count_borrow2:\n                    count_borrow2[book.ISBN] = count_temp2['ID__count']\n            context = {'books': books, 'count_borrow': count_borrow}\n            return render(request, 'BMS/queryBookInfo.html', context, )\n\n    books = booklist.objects.all()\n    count_borrow = {}\n    count_borrow2 = {}\n    for book in books:\n        count_temp = book.books_set.filter(status='已借出').aggregate(Count('ID'))\n        count_temp2 = book.books_set.filter(status='不外借').aggregate(Count('ID'))\n        # print(count_temp)\n        if book.ISBN not in count_borrow:\n            count_borrow[book.ISBN] = count_temp['ID__count']\n        if book.ISBN not in count_borrow2:\n            count_borrow2[book.ISBN] = count_temp2['ID__count']\n    print(count_borrow)\n    paginator = Paginator(books, 7)\n    page = request.GET.get('page')\n    books = paginator.get_page(page)\n\n    context = {'books': books, 'count_borrow': count_borrow, 'count_borrow2':count_borrow2}\n    return render(request, 'BMS/queryBookInfo.html', context, )\n\n\ndef querybooks(request):\n    ISBN = request.GET.get('ISBN')\n    print(ISBN)\n    book = books.objects.filter(ISBN=ISBN, status='未借出')\n    return render(request, 'BMS/queryBooks.html', {'books': book})\n\n\ndef reservation(request):\n    return render(request, 'BMS/reservation.html')\n\n\ndef borrowbook(request):\n    book_id = request.GET.get('ID')\n    print(book_id)\n    borrow_time = datetime.datetime.now().strftime('%Y-%m-%d')\n    return_time = (datetime.datetime.now() + datetime.timedelta(days=30)).strftime('%Y-%m-%d')\n\n    time = {}\n    time['borrow'] = borrow_time\n    time['return'] = return_time\n\n    if request.method == 'POST':\n        form = borrowForm(request.POST)\n        reader_id = readers.objects.filter(readerId=form.data['readerId'])\n        if reader_id:\n            count_temp = borrow.objects.filter(readerId=form.data['readerId']).aggregate(Count('id'))\n            print(count_temp,'***')\n            if count_temp['id__count'] >= 10:\n                messages.info(request, '您已经借阅10本书，请先还书')\n                return HttpResponseRedirect(\"/borrow/?ID=\"+book_id)\n            else:\n                borrow.objects.get_or_create(readerId=readers.objects.get(readerId=form.data['readerId']), returnTime=return_time,\n                                        borrowTime=borrow_time, bookId=books.objects.get(ID=book_id), status='未归还')\n                book = books.objects.get(ID=book_id)\n                book.status='已借出'\n                book.save()\n                messages.success(request,'借阅成功')\n                return redirect('mainPage')\n        else:\n            messages.error(request, '读者号有误，请重新输入')\n            return HttpResponseRedirect(\"/borrow/?ID=\"+book_id)\n\n    book_id = request.GET.get('ID')\n    print(book_id)\n    # bookChosen = books.objects.get(ID=book_id)\n    ID = {}\n    ID['id'] = book_id\n\n    form = borrowForm()\n    return render(request, 'BMS/borrow.html', {'ID':ID, 'time':time, 'form':form})\n\n\ndef borrowRecord(request):\n    return render(request, 'BMS/borrowRecord.html')\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- BMS/views.py	(revision 908264435d1635766aab86dcf02fdf9677d55194)
+++ BMS/views.py	(date 1592653987310)
@@ -87,6 +87,7 @@
             print(user)
             if user.password == pwd:
                 login(request, user)
+                print(user)
                 messages.success(request, "成功登录")
                 return redirect('mainPage')
             else:
